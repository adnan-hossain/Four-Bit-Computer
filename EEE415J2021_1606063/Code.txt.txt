module Computer(clock, port_in, port_out, A, B, temp, PC, PC_temp, IP, SP, OF, ZF, SF, HLT);
	
	input clock;
	input [3:0]port_in;						//input port 1
	output reg [3:0]port_out; 				//output port 1
	output reg [3:0]A, B, temp, PC, PC_temp, IP;
	output reg [1:0]SP;
	reg [3:0]RAM [0:15];
	reg [3:0]Stack [0:3];
	reg [3:0]address, const_byte; 
	output reg OF, ZF, SF, HLT;
	integer i;
	
	
	initial
	begin
		PC = 0;
		PC_temp = 0;
		IP = 0;
		SP = 0;
		A = 4'b0000;
		B = 4'b0000;
		OF = 0;
		ZF = 0;
		SF = 0;
		HLT = 0;
		
		//Instruction memory
		RAM[0][3:0] = 4'bxxxx;
		RAM[1][3:0] = 4'bxxxx;
		RAM[2][3:0] = 4'bxxxx;
		RAM[3][3:0] = 4'bxxxx;
		RAM[4][3:0] = 4'bxxxx;
		RAM[5][3:0] = 4'bxxxx;
		RAM[6][3:0] = 4'bxxxx;
		RAM[7][3:0] = 4'bxxxx;
		RAM[8][3:0] = 4'bxxxx;
		RAM[9][3:0] = 4'bxxxx;
		RAM[10][3:0] = 4'bxxxx;
		RAM[11][3:0] = 4'bxxxx;
		//Data memory
		RAM[12][3:0] = 0;
		RAM[13][3:0] = 0;
		RAM[14][3:0] = 0;
		RAM[15][3:0] = 0;
		
		//Initializing stack memory to zero
		for (i=0; i<4; i=i+1)
		begin
			Stack[i][3:0] = 4'b0000;
		end
		
		address = 14;
		const_byte = 13;
		
	end
	
	
	always @(posedge clock)	
	begin
		if (HLT == 0)
		begin
			if (IP == 4'b000)					//Line 1
				begin
				ADD(A, B, temp, OF);
				A = temp;
				if (A==0)	ZF = 1;
				end
				
			else if (IP == 4'b0001)				//Line 2
				begin
				SUB(A, B, temp, SF);
				A = temp;
				if (A==0)	ZF = 1;
				end
				
			else if (IP == 4'b0010)				//Line 3
				begin
				temp = A;
				A = B;
				B = temp;
				end
				
			else if (IP == 4'b0011)				//Line 4
				begin
				A = port_in;
				end
				
			else if (IP == 4'b0100)				//Line 5
				begin
				port_out = A;
				end
				
			else if (IP == 4'b0101)				//Line 6
				begin
				A = A + 1;
				if (A>15)
					OF =1;
				end
			
			else if (IP == 4'b0110)				//Line 7
				begin
				A = RAM[address];
				if (RAM[address]>15)	
					OF = 1;
				end
				
			else if (IP == 4'b0111)				//Line 8
				begin
				A = const_byte;
				if (const_byte>15)	
					OF = 1;
				end
				
			else if (IP == 4'b1000)				//Line 9
				begin
				if (ZF==1)
					PC_temp = address;
				end
				
			else if (IP == 4'b1001)				//Line 10
				begin
				Stack[SP] = B;
				SP = SP + 1;
				end
				
			else if (IP == 4'b1010)				//Line 11
				begin 
				SP = SP - 1;
				B = Stack[SP];
				if (B==0)	ZF = 1;
				end
				
			else if (IP == 4'b1011)				//Line 12
				begin 
				temp = {B[2:0], B[3]};
				B = temp;
				if (B==0)	ZF = 1;
				end
				
			else if (IP == 4'b1100)				//Line 13
				begin
				Stack[SP] = PC;
				SP = SP + 1;
				PC_temp = address;
				end
				
			else if (IP == 4'b1101)				//Line 14
				begin
				SP = SP - 1;
				PC_temp = Stack[SP];
				end
				
			else if (IP == 4'b1110)				//Line 15
				begin
				temp = A & RAM[address];
				A = temp;
				if (A==0)	ZF = 1;
				end
				
			else 								//Line 16
				HLT = 1;
		end
		
		else if (HLT == 1)
		begin
			SP = 0;
			A = 4'b0000;
			B = 4'b0000;
			temp = 4'b0000;
			for (i=0; i<16; i=i+1)
			begin
				RAM[i][3:0] = 4'b0000;
			end
			for (i=0; i<4; i=i+1)
			begin
				Stack[i][3:0] = 4'b0000;
			end
		end
		
	end
	
	
	always @(negedge clock)
	begin
		if (HLT==0)
		begin
			if ((IP == 4'b1000 && ZF == 1) || IP == 4'b1100 || IP == 4'b1101)
				begin
				PC = PC_temp;
				IP = RAM[PC];
				PC = PC + 1;
				end
			else
				begin
				IP = RAM[PC];
				PC = PC + 1;
				//IP = RAM[PC];
				end
		end
		else
		begin
			PC = 0;
			IP = 0;
		end  
	end 
	
		
	task ADD;
		
		input [3:0]A,B;
		output reg [3:0]SUM;
		output reg OF;
		
		{OF,SUM} = A + B;
		
	endtask
	
	
	task SUB;
		
		input [3:0]A;
		input [3:0]B;
		output reg [3:0]DIFF;
		output reg SF;
		
		if (A>=B)
			begin
			DIFF = A - B;
			SF = 0;
			end
		else 
			begin
			DIFF = B - A;
			SF = 1;
			end
		
	endtask	
	

endmodule